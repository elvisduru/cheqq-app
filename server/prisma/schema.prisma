// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id                 Int       @id @default(autoincrement())
  name               String?
  email              String    @unique
  emailVerified      Boolean   @default(false)
  active             Boolean   @default(false)
  avatarUrl          String?
  password           String?
  passwordUpdatedAt  DateTime?
  stores             Store[]
  orders             Order[]
  plan               Plan      @default(value: FREE)
  hashedRefreshToken String?
  prefs              Json      @default("{}")
  magicSecret        String?
  magicSecretExpiry  DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  addresses          Address[]
  images             Image[]
  videos             Video[]
  carts              Cart[]
}

model Store {
  id                   Int                  @id @default(autoincrement())
  owner                User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId              Int
  name                 String
  tag                  String               @unique
  status               Boolean              @default(true)
  domain               String?
  address              String
  addressCoordinates   Json?
  country              Country              @relation(fields: [countryId], references: [id])
  countryId            Int
  phone                String
  order_email          String?
  language             String
  currency             String
  currency_symbol      String
  logo                 String?
  banner               String?
  description          String?
  categories           Category[]
  public               Boolean              @default(false)
  orders               Order[]
  products             Product[]
  pricingRule          PricingRule[]
  deliveryZones        DeliveryZone[]
  shippingZones        ShippingZone[]
  fullfillmentServices FulfillmentService[]
  processingTime       ProcessingTime       @default(value: none)
  localPickup          Boolean              @default(false)
  followers            Follows[]            @relation("following")
  following            Follows[]            @relation("followers")
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
}

model Follows {
  follower    Store @relation("followers", fields: [followerId], references: [id])
  followerId  Int
  following   Store @relation("following", fields: [followingId], references: [id])
  followingId Int

  @@id([followerId, followingId])
}

model DeliveryZone {
  id                  Int      @id @default(autoincrement())
  store               Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId             Int
  name                String
  zipcodes            String[]
  states              String[]
  minOrderPrice       Float    @default(0)
  deliveryPrice       Float    @default(0)
  conditionalPricing  Json[]
  deliveryInformation String?
  price               Int
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model ShippingZone {
  id        Int            @id @default(autoincrement())
  store     Store          @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId   Int
  name      String
  locations Location[]
  rates     ShippingRate[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Location {
  id             Int           @id @default(autoincrement())
  country        Country       @relation(fields: [countryId], references: [id])
  countryId      Int
  states         State[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  shippingZone   ShippingZone? @relation(fields: [shippingZoneId], references: [id])
  shippingZoneId Int?
}

// TODO: Create endpoints for fetching countries, states or both.
model Country {
  id              Int        @id @default(autoincrement())
  name            String
  iso3            String?
  numeric_code    String?
  iso2            String?
  phone_code      String?
  capital         String?
  currency        String?
  currency_name   String?
  currency_symbol String?
  tld             String?
  native          String?
  region          String?
  subregion       String?
  timezones       Json[]
  translations    Json?
  latitude        Float?
  longitude       Float?
  emoji           String?
  emojiU          String?
  states          State[]
  location        Location[]
  store           Store[]
  address         Address[]
}

model State {
  id           Int       @id @default(autoincrement())
  name         String
  country      Country   @relation(fields: [country_id], references: [id], onDelete: Cascade)
  country_id   Int
  country_code String
  country_name String
  state_code   String
  type         String?
  latitude     Float?
  longitude    Float?
  location     Location? @relation(fields: [locationId], references: [id])
  locationId   Int?
}

model ShippingRate {
  id                 Int              @id @default(autoincrement())
  shippingZone       ShippingZone     @relation(fields: [shippingZoneId], references: [id], onDelete: Cascade)
  shippingZoneId     Int
  type               ShippingRateType @default(value: custom)
  // Custom rate fields
  transitTime        TransitTime
  customRateName     String? // required if transitTime is CUSTOM
  price              Float
  currency           String
  currency_symbol    String
  rateCondition      RateCondition?
  rateConditionMin   Float?
  rateConditionMax   Float?
  // Carrier fields
  carrier            Carrier?
  services           String[] // Selected services from carrier
  handlingFeePercent Float? // Handling fee percent
  handlingFeeFlat    Float? // Handling fee flat amount
}

model FulfillmentService {
  id      Int    @id @default(autoincrement())
  name    String
  email   String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId Int
}

model Product {
  id                     Int                   @id @default(autoincrement())
  store                  Store                 @relation(fields: [storeId], references: [id])
  storeId                Int
  collections            Collection[]
  type                   ProductType
  title                  String
  description            String
  tags                   String[]
  weight                 Float?
  weightUnit             WeightUnit?
  width                  Float?
  height                 Float?
  depth                  Float?
  dimensionUnit          DimensionUnit?
  price                  Float                 @default(0)
  compareAtPrice         Float?
  costPrice              Float?
  currency               String
  currency_symbol        String
  taxable                Boolean               @default(false)
  tax                    Tax?                  @relation(fields: [taxId], references: [id])
  taxId                  Int?
  categories             Category[]
  brand                  Brand?                @relation(fields: [brandId], references: [id])
  brandId                Int?
  options                ProductOption[]
  variants               ProductVariant[]
  // Inventory
  inventoryTracking      Boolean               @default(false)
  allowBackOrder         Boolean               @default(value: false)
  inventoryLevel         Int?
  inventoryWarningLevel  Int?
  sku                    String?
  gtin                   String?
  isFreeShipping         Boolean               @default(true)
  fixedShippingRate      Float?
  public                 Boolean               @default(false)
  featured               Boolean               @default(false)
  relatedProductRelation Product[]             @relation("RelatedProducts")
  relatedProducts        Product[]             @relation("RelatedProducts")
  warranty               String?
  layout                 String                @default(value: "default")
  availability           ProductAvailability   @default(value: available)
  availabilityLabel      String? // For products that are for display only (availability disabled), not for sale
  preOrderReleaseDate    DateTime?
  preOrderMessage        String?
  preOrderOnly           Boolean               @default(false)
  // minHandlingTime        Int?
  // maxHandlingTime        Int?
  // giftWrap               Boolean              @default(false)
  // giftWrapOptions        GiftWrapOption[]
  redirectUrl            String?
  shortUrl               String?
  condition              Condition?
  showCondition          Boolean               @default(false) // TODO: add this to the UI
  // SEO
  slug                   String                @unique
  searchKeywords         String[]
  pageTitle              String?
  metaDescription        String?
  metaKeywords           String[]
  viewCount              Int                   @default(value: 0)
  customUrl              String?
  openGraphTitle         String?
  openGraphImageUrl      String?
  openGraphDescription   String?
  openGraphType          OpenGraphType         @default(value: product)
  totalSold              Int                   @default(value: 0)
  reviewCount            Int                   @default(value: 0)
  reviewAverage          Float                 @default(value: 0)
  customFields           Json[]
  // Bulk Pricing rules
  pricingRules           PricingRule[]
  images                 Image[]
  videos                 Video[]
  // Subscriptions
  subscription           Boolean               @default(false)
  subscriptionInterval   SubscriptionInterval?
  subscriptionLength     Int?
  subscriptionPrice      Float?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  giftWrapOptions        GiftWrapOption[]
  cartItems              CartItem[]
}

model ProductOption {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  name      String
  values    String[]
}

model ProductVariant {
  id                    Int          @id @default(autoincrement())
  product               Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId             Int
  title                 String
  price                 Float?
  compareAtPrice        Float?
  costPrice             Float?
  inventoryTracking     Boolean      @default(false)
  allowBackOrder        Boolean      @default(value: false)
  inventoryLevel        Int          @default(value: 0)
  inventoryWarningLevel Int?
  sku                   String?
  gtin                  String?
  isFreeShipping        Boolean      @default(true)
  fixedShippingRate     Float? //TODO: add this to the UI
  image                 Image?       @relation(fields: [imageId], references: [id])
  imageId               Int?
  video                 Video?       @relation(fields: [videoId], references: [id])
  videoId               Int?
  enabled               Boolean      @default(true)
  pricingRule           PricingRule? @relation(fields: [pricingRuleId], references: [id])
  pricingRuleId         Int?
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  cartItems             CartItem[]
}

model Collection {
  id            Int          @id @default(autoincrement())
  name          String
  slug          String
  description   String?
  products      Product[]
  pricingRule   PricingRule? @relation(fields: [pricingRuleId], references: [id])
  pricingRuleId Int?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Image {
  id             Int              @id @default(autoincrement())
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  product        Product?         @relation(fields: [productId], references: [id])
  productId      Int?
  productVariant ProductVariant[]
  url            String
  description    String? // TODO: clicking on image gives you more control, i.e. zoom, thumbnail, description etc.
  sortOrder      Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Video {
  id             Int              @id @default(autoincrement())
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  product        Product?         @relation(fields: [productId], references: [id])
  productVariant ProductVariant[]
  productId      Int?
  url            String
  description    String?
  sortOrder      Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model PricingRule {
  id              Int                 @id @default(autoincrement())
  store           Store               @relation(fields: [storeId], references: [id])
  storeId         Int
  title           String?
  code            String?             @unique
  shipping        Boolean             @default(false)
  order           Boolean             @default(false)
  products        Product[]
  variants        ProductVariant[]
  collections     Collection[]
  quantityMin     Int                 @default(value: 1)
  adjusmentType   PriceAdjustmentType @default(value: fixed)
  adjustmentValue Float // Percentage (in decimals) or fixed value
  allocationLimit Int? // Buy X get Y free discounts
  usageLimit      Int?
  usageCount      Int                 @default(value: 0)
  startsAt        DateTime?
  endsAt          DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

model GiftWrapOption {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  name      String
  message   String
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id               Int        @id @default(autoincrement())
  name             String
  description      String?
  products         Product[]
  stores           Store[]
  parentCategory   Category?  @relation("CategorySubcategories", fields: [parentCategoryId], references: [id])
  parentCategoryId Int?
  subCategories    Category[] @relation("CategorySubcategories")
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Tax {
  id        Int       @id @default(autoincrement())
  products  Product[]
  name      String
  rate      Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id                Int         @id @default(autoincrement())
  store             Store       @relation(fields: [storeId], references: [id])
  storeId           Int
  customer          User        @relation(fields: [customerId], references: [id])
  customerId        Int
  billingAddress    Address     @relation(name: "BillingAddress", fields: [billingAddressId], references: [id])
  billingAddressId  Int
  shippingAddress   Address?    @relation(name: "ShippingAddress", fields: [shippingAddressId], references: [id])
  shippingAddressId Int?
  ipAddress         String?
  // cancelReason      CancelReason?
  cancelledAt       DateTime?
  note              String?
  annotations       Json[]
  // pickupDetails     PickupDetails[]
  lineItems         LineItem[]
  status            OrderStatus @default(value: PROCESSING)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Cart {
  id              Int        @id @default(autoincrement())
  customer        User?      @relation(fields: [customerId], references: [id])
  customerId      Int?
  currency        String
  currency_symbol String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  cartItems       CartItem[]
}

model CartItem {
  id        Int             @id @default(autoincrement())
  cart      Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    Int
  product   Product         @relation(fields: [productId], references: [id])
  productId Int
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  variantId Int?
  quantity  Int             @default(value: 1)
  coupon    String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

// A line item captures the quantity, price, and other important information about a product in an order at the time of purchase.
model LineItem {
  id                Int       @id @default(autoincrement())
  Order             Order     @relation(fields: [orderId], references: [id])
  orderId           Int
  quantityOrdered   Int
  quantityShipped   Int?
  quantityPending   Int?
  quantityCancelled Int?
  quantityReturned  Int?
  quantityDelivered Int?
  // Shipping details
  shippingMethod    String
  shippingCarrier   String?
  minDaysInTransit  Int
  maxDaysInTransit  Int
  isReturnable      Boolean
  daysToReturn      Int?
  policyUrl         String?
  // Product Details
  targetCountry     String?
  price             Int
  currency          String
  imageLink         String?
  title             String
  gtin              String?
  brand             String?
  mpn               String?
  condition         Condition
  attributes        Json[] //Extra attributes
  additionalFees    Json[] // Additional Fees at order creation time
  returns           Json[] // Returned items
  cancellations     Json[] // Cancelled items
  annotations       Json[] //Annotations that are attached to the line item.
  adjustments       Json[] // Price and tax adjustments that are attached to the line item.
}

// model PickupDetails {
//   id         Int         @id @default(autoincrement())
//   order      Order       @relation(fields: [orderId], references: [id])
//   orderId    Int
//   pickupType PickupType
//   collectors Collector[]
//   address    Address     @relation(fields: [addressId], references: [id])
//   addressId  Int
//   createdAt  DateTime    @default(now())
//   updatedAt  DateTime    @updatedAt
// }

// model Collector {
//   id        Int           @id @default(autoincrement())
//   pickup    PickupDetails @relation(fields: [pickupId], references: [id])
//   pickupId  Int
//   name      String
//   phone     String
//   createdAt DateTime      @default(now())
//   updatedAt DateTime      @updatedAt
// }

model Address {
  id                   Int     @id @default(autoincrement())
  firstName            String
  lastName             String
  address1             String
  address2             String?
  city                 String
  state                String?
  zip                  String
  country              Country @relation(fields: [countryId], references: [id])
  countryId            Int
  phone                String
  User                 User?   @relation(fields: [userId], references: [id])
  userId               Int?
  // PickupDetails        PickupDetails[]
  billingAddressOrder  Order[] @relation("BillingAddress")
  shippingAddressOrder Order[] @relation("ShippingAddress")
}

enum Plan {
  FREE
  PRO
}

enum ProductAvailability {
  available
  disabled
  preorder
}

enum ProductType {
  physical
  digital
}

enum WeightUnit {
  lb
  kg
  oz
  g
}

enum DimensionUnit {
  in
  cm
  m
}

enum TransitTime {
  economy
  standard
  express
  economyInternational
  standardInternational
  expressInternational
  custom
}

enum ProcessingTime {
  none
  sameDay
  nextDay
  twoDays
}

enum ShippingRateType {
  custom
  carrier
}

// TODO: Work on integrating with Shipping Carriers
enum Carrier {
  DHL
  UPS
  USPS
}

enum RateCondition {
  weight
  price
}

// enum ReturnReason {
//   customerDiscretionaryReturn
//   customerInitiatedMerchantCancel
//   deliveredTooLate
//   expiredItem
//   invalidCoupon
//   malformedShippingAddress
//   productArrivedDamaged
//   productNotAsDescribed
//   productNotAsExpected
//   undeliverableShippingAddress
//   wrongProductShipped
// }

enum PriceAdjustmentType {
  fixed
  percent
}

enum Condition {
  new
  used
  refurbished
}

enum OpenGraphType {
  product
  album
  book
  drink
  food
  game
  movie
  song
  tv_show
}

enum SubscriptionInterval {
  day
  week
  month
  year
}

// enum CancelReason {
//   customer
//   fraud
//   inventory
//   declined
//   other
// }

// enum PickupType {
//   merchantStore
//   merchantStoreCurbside
//   merchantStoreLocker
//   thirdPartyPickupPoint
//   thirdPartyLocker
// }

enum OrderStatus {
  PROCESSING
  CANCELLED
  PENDING_SHIPMENT
  PARTIALLY_SHIPPED
  SHIPPED
  PARTIALLY_DELIVERED
  DELIVERED
  PARTIALLY_RETURNED
  RETURNED
}
